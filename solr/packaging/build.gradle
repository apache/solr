/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This project puts together a "distribution", assembling dependencies from
// various other projects.

plugins {
  id 'base'
  id 'distribution'
  id 'signing'
}

description = 'Solr distribution packaging'

ext {
  distDir = file("$buildDir/solr-${version}")
  devDir = file("$buildDir/dev")
}

configurations {
  distSolr {
    transitive = false
  }
  distSolrj
  contrib
  example
  server
  docs
  docker
  solrTgz
  solrZip
}

artifacts {
  solrTgz(distTar)
  solrZip(distZip)
}

dependencies {
  distSolrj project(":solr:solrj")

  [":solr:contrib:analysis-extras",
   ":solr:contrib:analytics",
   ":solr:contrib:extraction",
   ":solr:contrib:clustering",
   ":solr:contrib:jaegertracer-configurator",
   ":solr:contrib:langid",
   ":solr:contrib:ltr",
   ":solr:contrib:prometheus-exporter",
   ":solr:contrib:scripting"
  ].each { contribName ->
    distSolr project(contribName)
    contrib  project(path: contribName, configuration: "packaging")
  }

  distSolr project(":solr:core")
  distSolr project(":solr:server")
  distSolr project(":solr:solrj")
  distSolr project(":solr:test-framework")

  example project(path: ":solr:example", configuration: "packaging")
  server project(path: ":solr:server", configuration: "packaging")

  // Copy files from documentation output
  docs project(path: ':solr:documentation', configuration: 'minimalSite')

  docker project(path: ':solr:docker', configuration: 'packaging')
}

distributions {
  main {
    distributionBaseName = 'solr'
    contents {
      // TODO: This is missing module README files, as compared to 8x

      // Manually correct posix permissions (matters when packaging on Windows).
      filesMatching([
          "**/*.sh",
          "**/bin/post",
          "**/bin/postlogs",
          "**/bin/solr",
          "**/bin/init.d/solr",
          "**/bin/solr-exporter",
          "**/docker/scripts/*",
      ]) { copy ->
        copy.setMode(0755)
      }

      from(project(":solr").projectDir, {
        include "bin/**"
        include "licenses/**"
        exclude "licenses/README.committers.txt"
        include "CHANGES.txt"
        include "LICENSE.txt"
        include "NOTICE.txt"
        include "README.md"
      })

      // Should we include Lucene changes?
      /*
        from(project(":lucene").projectDir, {
          include "CHANGES.txt"
          rename { file -> 'LUCENE_CHANGES.txt' }
        })
      */

      from(configurations.contrib, {
        into "contrib"
      })

      from(configurations.distSolr, {
        into "dist"
      })

      from(configurations.distSolrj - configurations.distSolr, {
        into "dist/solrj-lib"
      })

      from(configurations.example, {
        into "example"
      })

      from(configurations.server, {
        into "server"
      })

      from(configurations.docs, {
        into "docs"
      })

      from(configurations.docker, {
        into "docker"
      })

    }
  }
}

installDist {
  into distDir
}

task dev(type: Copy) {
  description "Assemble Solr distribution into 'development' folder at ${devDir}"
  group "build"

  from installDist.outputs
  into devDir
}

assemble.dependsOn installDist


// NOTE: we don't use the convinence DSL of the 'signing' extension to define our 'Sign' tasks because
// that (by default) adds our signature files to the 'archives' configuration -- which is what
// assemble & installDist try to copy/sync, so they wouldn't work w/o GPG installed (which would be bad).
//
// We also want to hook in our own property check dependency since the default error message from Sign task
// refers to the wrong (internal only) property name ("signatory.keyId")
signing {
  useGpgCmd() // so gpg-agent can be used
}
task failUnlessGpgKeyProperty {
  // placeholder that can be depended on by any task needing GPG key which will 'fail fast' if it's not set.
  def propName = 'signing.gnupg.keyName'

  // This explicitly checks the taskGraph (instead of a simple 'doFirst') so it can fail the user's gradle
  // invocation immediately before any unrelated build tasks may run in parallel
  if ( ! project.hasProperty(propName) ) {
    gradle.taskGraph.whenReady { graph ->
      if ( graph.hasTask(failUnlessGpgKeyProperty) ) {
        // TODO: it would be really nice if taskGraph was an actual graph and we could report what tasks in (transitive) depend on us
        throw new GradleException("'$propName' property must be set for GPG signing, please see help/gpgSigning.txt")
      }
    }
  }
}
task signDistTar(type: Sign) {
  dependsOn failUnlessGpgKeyProperty
  sign configurations.solrTgz
}
task signDistZip(type: Sign) {
  dependsOn failUnlessGpgKeyProperty
  sign configurations.solrZip
}
task signDist {
  group = 'Distribution'
  description = 'GPG Signs the main distributions'
  dependsOn signDistTar, signDistZip
}
