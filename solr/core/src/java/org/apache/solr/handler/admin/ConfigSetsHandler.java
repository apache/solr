/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.solr.handler.admin;

import com.google.common.collect.Maps;
import org.apache.solr.api.PayloadObj;
import org.apache.solr.client.solrj.SolrResponse;
import org.apache.solr.client.solrj.request.beans.CreateConfigPayload;
import org.apache.solr.cloud.ConfigSetCmds;
import org.apache.solr.cloud.OverseerSolrResponse;
import org.apache.solr.cloud.api.collections.DistributedCollectionConfigSetCommandRunner;
import org.apache.solr.common.SolrException;
import org.apache.solr.common.SolrException.ErrorCode;
import org.apache.solr.common.params.ConfigSetParams;
import org.apache.solr.common.params.ConfigSetParams.ConfigSetAction;
import org.apache.solr.common.params.SolrParams;
import org.apache.solr.common.util.NamedList;
import org.apache.solr.core.CoreContainer;
import org.apache.solr.handler.CreateConfigSetAPI;
import org.apache.solr.handler.DeleteConfigSetAPI;
import org.apache.solr.handler.ListConfigSetsAPI;
import org.apache.solr.handler.RequestHandlerBase;
import org.apache.solr.handler.UpdateConfigSetFileAPI;
import org.apache.solr.handler.UploadConfigSetAPI;
import org.apache.solr.request.DelegatingSolrQueryRequest;
import org.apache.solr.request.SolrQueryRequest;
import org.apache.solr.response.SolrQueryResponse;
import org.apache.solr.security.AuthorizationContext;
import org.apache.solr.security.PermissionNameProvider;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.invoke.MethodHandles;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import static org.apache.solr.common.params.CommonParams.NAME;
import static org.apache.solr.common.params.ConfigSetParams.ConfigSetAction.CREATE;
import static org.apache.solr.common.params.ConfigSetParams.ConfigSetAction.DELETE;
import static org.apache.solr.common.params.ConfigSetParams.ConfigSetAction.LIST;
import static org.apache.solr.common.params.ConfigSetParams.ConfigSetAction.UPLOAD;

/** A {@link org.apache.solr.request.SolrRequestHandler} for ConfigSets API requests. */
public class ConfigSetsHandler extends RequestHandlerBase implements PermissionNameProvider {
  public static final Boolean DISABLE_CREATE_AUTH_CHECKS =
      Boolean.getBoolean("solr.disableConfigSetsCreateAuthChecks"); // this is for back compat only
  public static final String DEFAULT_CONFIGSET_NAME = "_default";
  public static final String AUTOCREATED_CONFIGSET_SUFFIX = ".AUTOCREATED";
  private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());
  protected final CoreContainer coreContainer;
  private final Optional<DistributedCollectionConfigSetCommandRunner>
      distributedCollectionConfigSetCommandRunner;
  public static long CONFIG_SET_TIMEOUT = 300 * 1000;
  /**
   * Overloaded ctor to inject CoreContainer into the handler.
   *
   * @param coreContainer Core Container of the solr webapp installed.
   */
  public ConfigSetsHandler(final CoreContainer coreContainer) {
    this.coreContainer = coreContainer;
    distributedCollectionConfigSetCommandRunner =
        coreContainer != null
            ? coreContainer.getDistributedCollectionCommandRunner()
            : Optional.empty();
  }

  public static String getSuffixedNameForAutoGeneratedConfigSet(String configName) {
    return configName + AUTOCREATED_CONFIGSET_SUFFIX;
  }

  public static boolean isAutoGeneratedConfigSet(String configName) {
    return configName != null && configName.endsWith(AUTOCREATED_CONFIGSET_SUFFIX);
  }

  @Override
  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {
    checkErrors();

    // Pick the action
    final SolrParams requiredSolrParams = req.getParams().required();
    final String actionStr = requiredSolrParams.get(ConfigSetParams.ACTION);
    ConfigSetAction action = ConfigSetAction.get(actionStr);
    if (action == null) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Unknown action: " + actionStr);
    }

    switch (action) {
      case DELETE:
        final DeleteConfigSetAPI deleteConfigSetAPI = new DeleteConfigSetAPI(coreContainer);
        final SolrQueryRequest v2DeleteReq = new DelegatingSolrQueryRequest(req) {
          @Override
          public Map<String, String> getPathTemplateValues() {
            return Map.of(DeleteConfigSetAPI.CONFIGSET_NAME_PLACEHOLDER, req.getParams().required().get(NAME));
          }
        };
        deleteConfigSetAPI.deleteConfigSet(v2DeleteReq, rsp);
        break;
      case UPLOAD:
        final SolrQueryRequest v2UploadReq = new DelegatingSolrQueryRequest(req) {
          @Override
          public Map<String, String> getPathTemplateValues() {
            final Map<String, String> templateValsByName = Maps.newHashMap();

            templateValsByName.put(DeleteConfigSetAPI.CONFIGSET_NAME_PLACEHOLDER, req.getParams().required().get(NAME));
            if (! req.getParams().get(ConfigSetParams.FILE_PATH, "").isEmpty()) {
              templateValsByName.put("*", req.getParams().get(ConfigSetParams.FILE_PATH));
            }
            return templateValsByName;
          }
        };
        if (req.getParams().get(ConfigSetParams.FILE_PATH, "").isEmpty()) { // Uploading a whole configset
          new UploadConfigSetAPI(coreContainer).uploadConfigSet(v2UploadReq, rsp);
        } else { // Uploading a single file
          new UpdateConfigSetFileAPI(coreContainer).updateConfigSetFile(v2UploadReq, rsp);
        }
        break;
      case LIST:
        new ListConfigSetsAPI(coreContainer).listConfigSet(req, rsp);
        break;
      case CREATE:
        final String baseConfigSetName =
                req.getParams().get(ConfigSetCmds.BASE_CONFIGSET, DEFAULT_CONFIGSET_NAME);
        final String newConfigSetName = req.getParams().get(NAME);
        if (newConfigSetName == null || newConfigSetName.length() == 0) {
          throw new SolrException(ErrorCode.BAD_REQUEST, "ConfigSet name not specified");
        }

        // Map v1 parameters into v2 format and process request
        final CreateConfigPayload createPayload = new CreateConfigPayload();
        createPayload.name = newConfigSetName;
        createPayload.baseConfigSet = baseConfigSetName;
        createPayload.properties = new HashMap<>();
        req.getParams().stream()
                .filter(entry -> entry.getKey().startsWith(ConfigSetCmds.CONFIG_SET_PROPERTY_PREFIX))
                .forEach(entry -> {
                  final String newKey = entry.getKey().substring(ConfigSetCmds.CONFIG_SET_PROPERTY_PREFIX.length());
                  final Object value = (entry.getValue().length == 1) ? entry.getValue()[0] : entry.getValue();
                  createPayload.properties.put(newKey, value);
                });
        final CreateConfigSetAPI createConfigSetAPI = new CreateConfigSetAPI(coreContainer);
        createConfigSetAPI.create(new PayloadObj<>("create", null, createPayload, req, rsp));
        break;
      default:
        throw new IllegalStateException("Unexpected ConfigSetAction detected: " + action);
    }
    rsp.setHttpCaching(false);
  }

  protected void checkErrors() {
    if (coreContainer == null) {
      throw new SolrException(ErrorCode.BAD_REQUEST, "Core container instance missing");
    }

    // Make sure that the core is ZKAware
    if (!coreContainer.isZooKeeperAware()) {
      throw new SolrException(
          ErrorCode.BAD_REQUEST, "Solr instance is not running in SolrCloud mode.");
    }
  }

  @Override
  public String getDescription() {
    return "Manage SolrCloud ConfigSets";
  }

  @Override
  public Category getCategory() {
    return Category.ADMIN;
  }

  public enum ConfigSetOperation {
    UPLOAD_OP(UPLOAD) {
      @Override
      public Map<String, Object> call(
          SolrQueryRequest req, SolrQueryResponse rsp, ConfigSetsHandler h) throws Exception {
        return null;
      }
    },
    CREATE_OP(CREATE) {
      @Override
      public Map<String, Object> call(
          SolrQueryRequest req, SolrQueryResponse rsp, ConfigSetsHandler h) throws Exception {
        return null;
      }
    },
    DELETE_OP(DELETE) {
      @Override
      public Map<String, Object> call(
          SolrQueryRequest req, SolrQueryResponse rsp, ConfigSetsHandler h) throws Exception {
        return CollectionsHandler.copy(req.getParams().required(), null, NAME);
      }
    },
    @SuppressWarnings({"unchecked"})
    LIST_OP(LIST) {
      @Override
      public Map<String, Object> call(
          SolrQueryRequest req, SolrQueryResponse rsp, ConfigSetsHandler h) throws Exception {
        NamedList<Object> results = new NamedList<>();
        List<String> configSetsList = h.coreContainer.getConfigSetService().listConfigs();
        results.add("configSets", configSetsList);
        SolrResponse response = new OverseerSolrResponse(results);
        rsp.getValues().addAll(response.getResponse());
        return null;
      }
    };

    ConfigSetAction action;

    ConfigSetOperation(ConfigSetAction action) {
      this.action = action;
    }

    public ConfigSetAction getAction() {
      return action;
    }

    public abstract Map<String, Object> call(
        SolrQueryRequest req, SolrQueryResponse rsp, ConfigSetsHandler h) throws Exception;

    public static ConfigSetOperation get(ConfigSetAction action) {
      for (ConfigSetOperation op : values()) {
        if (op.action == action) return op;
      }
      throw new SolrException(ErrorCode.SERVER_ERROR, "No such action" + action);
    }
  }

  @Override
  public Name getPermissionName(AuthorizationContext ctx) {
    String a = ctx.getParams().get(ConfigSetParams.ACTION);
    if (a != null) {
      ConfigSetAction action = ConfigSetAction.get(a);
      if (action == ConfigSetAction.CREATE
          || action == ConfigSetAction.DELETE
          || action == ConfigSetAction.UPLOAD) {
        return Name.CONFIG_EDIT_PERM;
      } else if (action == ConfigSetAction.LIST) {
        return Name.CONFIG_READ_PERM;
      }
    }
    return null;
  }
}
