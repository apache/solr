/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id "org.openapi.generator" version "6.6.0"
}

apply plugin: 'java-library'
apply plugin: 'com.diffplug.spotless'

import com.diffplug.gradle.spotless.JavaExtension


description = 'Solrj - Solr Java Client'

dependencies {
  // TODO Most likely temporary, due to historical pushback on adding Jackson deps to solrj, but it does _hugely_
  //  simplify the parsing code and there are new compelling reasons, given the claims around CBOR performance relative
  //  to JSON, javabin, etc.
  implementation 'com.fasterxml.jackson.core:jackson-databind' // Came from a testImplementation line below.
  implementation project(":solr:api")

  implementation 'org.slf4j:slf4j-api'
  runtimeOnly 'org.slf4j:jcl-over-slf4j'

  api 'org.eclipse.jetty.http2:http2-client'
  implementation 'org.eclipse.jetty.http2:http2-http-client-transport'
  implementation 'org.eclipse.jetty:jetty-http'
  implementation 'org.eclipse.jetty:jetty-client'
  implementation 'org.eclipse.jetty:jetty-util'
  implementation 'org.eclipse.jetty:jetty-io'
  runtimeOnly 'org.eclipse.jetty:jetty-alpn-java-client'

  api('org.apache.httpcomponents:httpmime', {
    exclude group: "commons-codec", module: "commons-codec"
    exclude group: "commons-logging", module: "commons-logging"
  })
  implementation 'org.apache.httpcomponents:httpclient'
  implementation 'org.apache.httpcomponents:httpcore'

  compileOnly 'com.github.stephenc.jcip:jcip-annotations'

  testImplementation project(':solr:test-framework')
  testImplementation project(':solr:core')
  testImplementation project(':solr:solrj')

  // ideally ZK centric tests move to solrj-zookeeper but sometimes we depend on ZK here anyway
  testImplementation project(':solr:solrj-zookeeper')
  testImplementation('org.apache.zookeeper:zookeeper', {
    exclude group: "org.apache.yetus", module: "audience-annotations"
  })
  permitTestUnusedDeclared 'org.apache.zookeeper:zookeeper'
  testImplementation 'org.apache.zookeeper:zookeeper-jute'

  testImplementation 'org.apache.lucene:lucene-core'
  testImplementation 'org.apache.lucene:lucene-test-framework'

  testImplementation 'com.carrotsearch.randomizedtesting:randomizedtesting-runner'
  testImplementation 'junit:junit'
  testImplementation 'org.hamcrest:hamcrest'

  testImplementation 'commons-io:commons-io'
  testImplementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor'

  testImplementation 'org.eclipse.jetty.toolchain:jetty-servlet-api'

  testImplementation 'org.eclipse.jetty:jetty-server'
  testImplementation 'org.eclipse.jetty:jetty-servlet'
  testImplementation 'org.eclipse.jetty:jetty-webapp'
  testRuntimeOnly ('org.eclipse.jetty:jetty-alpn-java-server', {
    exclude group: "org.eclipse.jetty.alpn", module: "alpn-api"
  })
  testImplementation('org.mockito:mockito-core', {
    exclude group: "net.bytebuddy", module: "byte-buddy-agent"
  })
  testRuntimeOnly('org.mockito:mockito-subclass', {
    exclude group: "net.bytebuddy", module: "byte-buddy-agent"
  })
  testRuntimeOnly("org.apache.logging.log4j:log4j-slf4j2-impl", {
    exclude group: "org.apache.logging.log4j", module: "log4j-api"
  })
  testImplementation 'org.apache.commons:commons-lang3'
  testImplementation 'io.dropwizard.metrics:metrics-core'
}

/**
 * Generate Code
 */

evaluationDependsOn(":solr:api")

configurations {
  openApiSpecFile {
    canBeConsumed = false
  }
  generatedCode
}

ext {
  generatedCodeDir = "${buildDir}/generated/"
  javaTemplateDir = "${projectDir}/src/resources/java-template"
}

dependencies {
  openApiSpecFile(project(path: ":solr:api", configuration: "openapiSpec"))
  generatedCode files("${project.generatedCodeDir}/main/java") {
    builtBy tasks.openApiGenerate
  }
}

/**
 * Setup Spotless (Code formatting) for the generated files
 */
def generatedExt = new JavaExtension(spotless)
project.ext.spotlessJavaSetup.execute(generatedExt)
generatedExt.target("${project.generatedCodeDir}/src/**/*.java")
def generatedSpotlessTask = generatedExt.createIndependentApplyTask("generatedSpotless")
generatedSpotlessTask.group("build")
generatedSpotlessTask.description("Apply formatting for generated code")

openApiGenerate {
  generatorName = "java"
  inputSpec = project(":solr:api").openApiSpecFile

  // Add 'debugModels: ""' or 'debugOperations: ""' to get the JSON input to mustache templating for those components
  globalProperties.set([apis: "", models: "false"])
  templateDir = project.javaTemplateDir
  apiPackage = "org.apache.solr.client.solrj.request"
  outputDir = project.generatedCodeDir
  generateApiTests = false
  generateModelTests = false
  generateApiDocumentation = false
  generateModelDocumentation = false
  additionalProperties = ["modelPackage": "org.apache.solr.api.model"]
}

tasks.openApiGenerate.dependsOn configurations.openApiSpecFile
tasks.openApiGenerate.finalizedBy generatedSpotlessTask
// the generatedSpotlessTask has a super-task that we are not given, that should also depend on the code generation.
generatedSpotlessTask.taskDependencies.getDependencies(generatedSpotlessTask).each {
  it.dependsOn tasks.openApiGenerate
}
generatedSpotlessTask.dependsOn tasks.openApiGenerate

sourceSets {
  main {
    java {
      srcDir "${buildDir}/generated/src/main/java"
    }
  }
}
tasks.compileJava.dependsOn(configurations.generatedCode)
