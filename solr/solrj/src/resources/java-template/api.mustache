{{>licenseInfo}}

package {{package}};
{{#imports}}
import {{import}};
{{/imports}}

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.solr.client.solrj.SolrClient;
import org.apache.solr.client.solrj.SolrRequest;
import org.apache.solr.client.solrj.response.SimpleSolrResponse;
import org.apache.solr.common.params.SolrParams;
import org.apache.solr.common.params.ModifiableSolrParams;
import org.apache.solr.client.solrj.JacksonParsingResponse;
import org.apache.solr.client.solrj.JacksonContentWriter;
import org.apache.solr.client.solrj.request.RequestWriter.ContentWriter;
import org.apache.solr.client.solrj.impl.InputStreamResponseParser;
import org.apache.solr.client.solrj.ResponseParser;

{{#operations}}
public class {{classname}} {

    {{#operation}}
        public static class {{operationIdCamelCase}}Response extends JacksonParsingResponse<{{returnType}}> {
          public {{operationIdCamelCase}}Response() {
            super({{returnType}}.class);
          }
        }

        public static class {{operationIdCamelCase}} extends SolrRequest<{{operationIdCamelCase}}Response> {
            {{#requiredParams}}
            {{#isBodyParam}}
            private final {{{dataType}}} requestBody;
            {{/isBodyParam}}
            {{^isBodyParam}}
            private final {{{dataType}}} {{paramName}};
            {{/isBodyParam}}
            {{/requiredParams}}
            {{#optionalParams}}
            private {{{dataType}}} {{paramName}};
            {{/optionalParams}}

            /**
             * Create a {{operationIdCamelCase}} request object.
             *
             {{#requiredParams}}{{^isBodyParam}}* @param {{paramName}} {{description}}{{/isBodyParam}}
             {{/requiredParams}}
             */
            public {{operationIdCamelCase}}({{#requiredParams}}{{^isBodyParam}}{{^-first}}, {{/-first}}{{{dataType}}} {{paramName}}{{/isBodyParam}}{{/requiredParams}}) {
                super(
                  SolrRequest.METHOD.valueOf("{{httpMethod}}"),
                  "{{{path}}}"{{#pathParams}}
                    .replace("{" + "{{baseName}}" + "}", {{paramName}}){{/pathParams}}
                );

                {{#requiredParams}}
                {{^isBodyParam}}
                    this.{{paramName}} = {{paramName}};
                {{/isBodyParam}}
                {{#isBodyParam}}
                    this.requestBody = new {{baseName}}();
                    addHeader("Content-type", "application/json");
                {{/isBodyParam}}
                {{/requiredParams}}
            }

            {{#optionalParams}}
            {{#description}}
            /**
             * @param {{paramName}} {{description}}
             */
            {{/description}}
            public void {{schema.setter}}({{dataType}} {{paramName}}) {
                this.{{paramName}} = {{paramName}};
            }

            {{/optionalParams}}

            {{#bodyParam}}
            {{#vars}}
            // TODO find a way to add required parameters in the request body to the class constructor
            {{#description}}
            /**
             * @param {{baseName}} {{description}}
             */
             {{/description}}
             public void {{setter}}({{dataType}} {{baseName}}) {
               this.requestBody.{{setter}}({{baseName}});
            }
            {{/vars}}

            @Override
            public RequestWriter.ContentWriter getContentWriter(String expectedType) {
                return new JacksonContentWriter(expectedType, requestBody);
            }
            {{/bodyParam}}

            // TODO Hardcode this for now, but in reality we'll want to parse this out of the Operation data somehow
            @Override
            public String getRequestType() {
              return SolrRequestType.ADMIN.toString();
            }

            @Override
            public SolrParams getParams() {
              final ModifiableSolrParams params = new ModifiableSolrParams();
              {{#queryParams}}
              if ({{paramName}} != null) {
                  params.add("{{baseName}}", {{paramName}}{{^isString}}.toString(){{/isString}});
              }
              {{/queryParams}}
              return params;
            }

            @Override
            protected {{operationIdCamelCase}}Response createResponse(SolrClient client) {
              return new {{operationIdCamelCase}}Response();
            }

            @Override
            public ResponseParser getResponseParser() {
              return new InputStreamResponseParser("json");
            }
        }
    {{/operation}}
}
{{/operations}}
