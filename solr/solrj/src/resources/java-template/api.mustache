/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package {{package}};

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.solr.client.solrj.SolrClient;
import org.apache.solr.client.solrj.SolrRequest;
import org.apache.solr.client.solrj.response.SimpleSolrResponse;
import org.apache.solr.common.params.SolrParams;
import org.apache.solr.common.params.ModifiableSolrParams;
import org.apache.solr.client.solrj.JacksonParsingResponse;
import org.apache.solr.client.solrj.JacksonContentWriter;
import org.apache.solr.client.solrj.request.RequestWriter.ContentWriter;
import org.apache.solr.client.solrj.impl.InputStreamResponseParser;
import org.apache.solr.client.solrj.ResponseParser;

{{! Covers all top-level request/response model classes, but not necessarily any types nested in those classes }}
{{#imports}}
import {{import}};
{{/imports}}

{{! Imports any model types nested in request body POJOs }}
{{#operations}}
{{#operation}}
{{#bodyParam}}
{{#vars}}
{{#isModel}}
import {{modelPackage}}.{{dataType}};
{{/isModel}}
{{/vars}}
{{/bodyParam}}
{{/operation}}
{{/operations}}

{{#operations}}
// WARNING: This class is generated from a Mustache template; any intended
// changes should be made to the underlying template and not this file directly.

/**
 * Experimental SolrRequest's and SolrResponse's for {{classVarName}}, generated from an OAS.
 *
 * <p>See individual request and response classes for more detailed and relevant information.
 *
 * <p>All SolrRequest implementations rely on v2 APIs which may require a SolrClient configured to
 * use the '/api' path prefix, instead of '/solr'.
 *
 * @lucene.experimental
 */
public class {{classname}} {

    {{#operation}}
        public static class {{operationIdCamelCase}}Response extends JacksonParsingResponse<{{returnType}}> {
          public {{operationIdCamelCase}}Response() {
            super({{returnType}}.class);
          }
        }

        public static class {{operationIdCamelCase}} extends SolrRequest<{{operationIdCamelCase}}Response> {
            {{#bodyParam}}
            private final {{{dataType}}} requestBody;
            {{/bodyParam}}
            {{#requiredParams}}
            {{^isBodyParam}}
            private final {{{dataType}}} {{paramName}};
            {{/isBodyParam}}
            {{/requiredParams}}
            {{#optionalParams}}
            {{^isBodyParam}}
            private {{{dataType}}} {{paramName}};
            {{/isBodyParam}}
            {{/optionalParams}}

            /**
             * Create a {{operationIdCamelCase}} request object.
             *
             {{#requiredParams}}{{^isBodyParam}}* @param {{paramName}} Path param - {{description}}{{/isBodyParam}}
             {{/requiredParams}}
             */
            public {{operationIdCamelCase}}({{#allParams}}{{#required}}{{^isBodyParam}}{{^-first}}, {{/-first}}{{{dataType}}} {{paramName}}{{/isBodyParam}}{{#isBodyParam}}{{#vendorExtensions.x-genericEntity}}{{^-first}}, {{/-first}}{{{dataType}}} requestBody{{/vendorExtensions.x-genericEntity}}{{/isBodyParam}}{{/required}}{{/allParams}}) {
                super(
                  SolrRequest.METHOD.valueOf("{{httpMethod}}"),
                  "{{{path}}}"{{#pathParams}}
                    .replace("{" + "{{baseName}}" + "}", {{paramName}}{{^isString}}.toString(){{/isString}}){{/pathParams}}
                );

                {{#requiredParams}}
                {{#isBodyParam}}
                {{#vendorExtensions.x-genericEntity}}
                    this.requestBody = requestBody;
                    addHeader("Content-type", "application/json");
                {{/vendorExtensions.x-genericEntity}}
                {{/isBodyParam}}
                {{^isBodyParam}}
                    this.{{paramName}} = {{paramName}};
                {{/isBodyParam}}
                {{/requiredParams}}
                {{#bodyParam}}
                {{^vendorExtensions.x-genericEntity}}
                    this.requestBody = new {{{dataType}}}();
                    addHeader("Content-type", "application/json");
                {{/vendorExtensions.x-genericEntity}}
                {{/bodyParam}}
            }

            {{#optionalParams}}
            {{^isBodyParam}}
            {{#description}}
            /**
             * @param {{paramName}} {{description}}
             */
            {{/description}}
            public void {{schema.setter}}({{{dataType}}} {{paramName}}) {
                this.{{paramName}} = {{paramName}};
            }

            {{/isBodyParam}}
            {{/optionalParams}}

            {{#bodyParam}}
            {{#vars}}
            // TODO find a way to add required parameters in the request body to the class constructor
            {{#description}}
            /**
             * @param {{baseName}} {{description}}
             */
             {{/description}}
             public void {{setter}}({{{dataType}}} {{baseName}}) {
               this.requestBody.{{baseName}} = {{baseName}};
            }
            {{/vars}}

            @Override
            @SuppressWarnings("unchecked")
            public RequestWriter.ContentWriter getContentWriter(String expectedType) {
                {{#vendorExtensions.x-genericEntity}}
                if (requestBody instanceof String) {
                    return new RequestWriter.StringPayloadContentWriter((String) requestBody, expectedType);
                }
                {{/vendorExtensions.x-genericEntity}}
                return new JacksonContentWriter(expectedType, requestBody);
            }
            {{/bodyParam}}

            // TODO Hardcode this for now, but in reality we'll want to parse this out of the Operation data somehow
            @Override
            public String getRequestType() {
              return SolrRequestType.ADMIN.toString();
            }

            @Override
            public SolrParams getParams() {
              final ModifiableSolrParams params = new ModifiableSolrParams();
              {{#queryParams}}
              if ({{paramName}} != null) {
                  {{#isArray}}{{paramName}}.stream().forEach(v -> params.add("{{baseName}}", v{{^items.isString}}.toString(){{/items.isString}}));{{/isArray}}
                  {{^isArray}}params.add("{{baseName}}", {{paramName}}{{^isString}}.toString(){{/isString}});{{/isArray}}
              }
              {{/queryParams}}
              return params;
            }

            @Override
            protected {{operationIdCamelCase}}Response createResponse(SolrClient client) {
              return new {{operationIdCamelCase}}Response();
            }

            @Override
            public ResponseParser getResponseParser() {
              return new InputStreamResponseParser("json");
            }
        }
    {{/operation}}
}
{{/operations}}
