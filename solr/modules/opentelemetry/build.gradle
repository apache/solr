/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java-library'

description = 'Open Telemetry (OTEL) tracer'

dependencies {
  implementation project(':solr:core')

  implementation platform('io.opentelemetry:opentelemetry-bom-alpha')

  implementation 'io.opentracing:opentracing-api'
  implementation 'org.slf4j:slf4j-api'

  implementation 'io.opentelemetry:opentelemetry-sdk'
  implementation 'io.opentelemetry:opentelemetry-sdk-trace'
  implementation 'io.opentelemetry:opentelemetry-sdk-extension-autoconfigure'
  implementation 'io.opentelemetry:opentelemetry-opentracing-shim'
  runtimeOnly 'io.opentelemetry:opentelemetry-semconv'
  runtimeOnly 'io.opentelemetry:opentelemetry-exporter-otlp'
  // End users must recompile with jaeger exporter and/or zipkin exporter if they need these

  // NOTE: sdk-autoconfigure needs both opentelemetry-sdk-metrics and opentelemetry-sdk-logs even if we don't use them

  // gRPC transport via netty - since we already ship netty this is more lightweight than netty-shaded
  runtimeOnly 'io.grpc:grpc-netty'
  runtimeOnly 'io.grpc:grpc-protobuf'
  runtimeOnly 'io.grpc:grpc-stub'
  runtimeOnly 'io.grpc:grpc-context'
  // See https://issues.apache.org/jira/browse/LOG4J2-3609 due to needing these annotations
  compileOnly 'org.apache.tomcat:annotations-api'


  // Both this and jaegertracer-configurator pull in com.squareup.okhttp3:okhttp HTTP client and kotlin stdlib.

  testImplementation project(':solr:test-framework')
  testImplementation project(':solr:solrj')
  testImplementation 'com.carrotsearch.randomizedtesting:randomizedtesting-runner'
  testImplementation 'junit:junit'
  testImplementation 'io.opentracing:opentracing-util'
}
