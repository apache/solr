/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.asciidoctor:asciidoctorj:2.5.1"
    }
}

plugins {
    id 'java'
    id 'com.github.jruby-gradle.base' version '2.0.1'
}

// This project does not contribute anything to main dependencies.
versionsLock {
    testProject()
}

description = 'Solr reference guide'

// Use an internal proxy to ruby gems.
repositories {
    ruby.gems()
}

configurations {
    depVer
    refGuide
}

dependencies {
    // Dependencies to compile internal tools.
    implementation('org.asciidoctor:asciidoctorj')
    implementation('com.vaadin.external.google:android-json')
    implementation('org.jsoup:jsoup')
    implementation('org.slf4j:jcl-over-slf4j')
    implementation('org.slf4j:slf4j-simple')
    implementation('org.apache.logging.log4j:log4j-core')
    implementation('com.google.guava:guava')
    implementation('commons-codec:commons-codec')

    // Dependencies referenced in the guide.
    depVer('commons-codec:commons-codec')
    depVer('io.dropwizard.metrics:metrics-core')
    depVer('org.apache.logging.log4j:log4j-core')
    depVer('org.apache.opennlp:opennlp-tools')
    depVer('org.apache.tika:tika-core')
    depVer('org.apache.zookeeper:zookeeper')

    // jekyll dependencies: we cannot use jekyll >=4, as this version uses native lib
    // ("sassc" instead of deprecated "sass") which fails to compile on some platforms.
    // See https://issues.apache.org/jira/browse/SOLR-15520 for more details.
    gems 'rubygems:jekyll:3.9.1'
    gems 'rubygems:jekyll-asciidoc:3.0.0'

    // don't know why we have to explicitly add these deps but it doesn't resolve them
    // automatically.
    gems 'rubygems:tilt:2.0.10'
    gems 'rubygems:slim:4.1.0'
    gems 'rubygems:concurrent-ruby:1.1.9'
    gems 'rubygems:http_parser.rb:0.6.0'


}

sourceSets {
    refGuide {
        java {
            srcDirs = []
        }
        resources {
            srcDirs = ['src']
        }
    }

    main {
        java {
            srcDirs = ['tools']
        }
    }

    test {
        java {
            srcDirs = []
        }
    }
}

ext {
    mainPage = "index"

    // the "MAJOR.MINOR" version of solr this guide is about (guides aren't specific to BUGFIX releases)
    // So on 'branch_9_9' where 'version' may be 9.9.0, 9.9.1, 9.9.9, etc..;  solrDocsVersion = 9.9
    solrDocsVersion = "${version}".replaceAll(/^(\d+\.\d+)(|\..*)$/, "\$1")

    // the "MAJOR_MINOR" version as a path for publishing the guide
    // So on 'branch_9_9' where solrDocsVersion = 9.9; solrGuideVersionPath => 9_9
    solrGuideVersionPath = "${solrDocsVersion}".replaceAll(/^(\d+)\.(\d+)$/, "\$1_\$2")

    // these will be used to dynamically build up (nearly) identical tasks with consistent names
    // for building & link checking the ref guide.  One using absolute URLs to javadocs, the
    // other using local paths that can be validated by the link checker.
    htmlSiteDetails =
        [name: 'Site',
         path: 'html-site',
         desc: 'HTML Site for publishing to the Solr website',
         props: [
            htmlSolrJavadocs: "https://solr.apache.org/docs/${solrGuideVersionPath}_0/",
            htmlLuceneJavadocs: project(':solr:documentation').luceneDocUrl
        ]
    ]
    linkCheckSiteDetails =
        [name: 'LocalJavadocLinksSite',
         path: 'local-jdoc-links-site',
         desc: 'Local Site for checking javadoc links',

         // NOTE: extra '../' because we'll in a sub-dir of buildDir that will be built later...
         props: [
            htmlSolrJavadocs : 'link:../' + buildDir.toPath().relativize(project(':solr:documentation').docroot.toPath()).toString().replace(File.separator, '/'),
            htmlLuceneJavadocs :  'link:../' + buildDir.toPath().relativize(project(':solr:documentation').luceneDocsDir.toPath()).toString().replace(File.separator, '/'),
         ]

         // TODO: (see full discussion in SOLR-15265)
         // Ref guide build should really depend on those javadocs it links to - then there would be no awkwardness and, ideally,
         // you could just sync the resources you need into the final structure (that's why I declared javadocs as an artifact).
         // This does entail some duplication (syncing between folders) but if it's reused in different places then it's fine.
    ]
}

// dynamically define the 2 variations of each target that we need...
[ htmlSiteDetails, linkCheckSiteDetails ].each{ details ->
    final def contentDir = file("${buildDir}/${details.path}-content")
    final def htmlDir = file("${buildDir}/${details.path}")

    tasks.create("prepare${details.name}Sources", PrepareSources) {
        // configure task properties.
        srcDir.set(project.sourceSets.refGuide.resources.srcDirs.first())
        outDir.set(contentDir)

        // Set these dependency versions as lazy gstrings so that they're resolved after evaluation.
        def dependencyProps = [
            ["ivyCommonsCodec", "commons-codec", "commons-codec"],
            ["ivyDropwizardMetrics", "io.dropwizard.metrics", "metrics-core"],
            ["ivyHadoop", "org.apache.hadoop", "hadoop-auth"],
            ["ivyLog4j", "org.apache.logging.log4j", "log4j-core"],
            ["ivyOpennlpTools", "org.apache.opennlp", "opennlp-tools"],
            ["ivyTika", "org.apache.tika", "tika-core"],
            ["ivyZookeeper", "org.apache.zookeeper", "zookeeper"],
        ].collectEntries { propKey, depGroup, depId -> [propKey, "${ -> project.getVersion(depGroup, depId) }"] }

        props.putAll([
            htmlOutDir: "../${details.path}",
            javadocLink : "https://docs.oracle.com/en/java/javase/11/docs/api/java.base/",
            solrGuideDraftStatus : propertyOrDefault('solrGuideDraft', "true").toBoolean() ? "DRAFT" : "",
            solrRootPath : project(':solr').projectDir.toString() + File.separator,
            solrDocsVersion : project.ext['solrDocsVersion'],
            solrGuideVersionPath : project.ext['solrGuideVersionPath'],
            solrFullVersion: project.version,
            buildDate : rootProject.ext['buildDate'],
            buildYear : rootProject.ext['buildYear'],
            * : details.props,
            * : dependencyProps
        ])
    }

    task "build${details.name}"(type: com.github.jrubygradle.JRubyExec) {
        dependsOn "prepare${details.name}Sources"
        group "Documentation"
        description "Builds the ${details.desc}"

        outputs.cacheIf { true }
        inputs.dir contentDir
        outputs.dir htmlDir

        script 'jekyll'
        scriptArgs 'build' //, '--verbose'
        workingDir contentDir
    }

    task "check${details.name}"(type: JavaExec) {
        dependsOn "build${details.name}"

        classpath = sourceSets.main.runtimeClasspath
        main = 'org.apache.solr.guide.CheckLinksAndAnchors'
        workingDir = contentDir

        // NOTE: even for the 'real' site, we check all relative links
        // (there will just be less of them, and this way any stray hardcoded
        // '../../' paths can be caught more easily)
        args([ htmlDir, "-check-all-relative-links" ])
    }
}

// Hook in our dependency on all top level documentation in order to check local javadoc links
checkLocalJavadocLinksSite.dependsOn ':documentation'

// Attach building the ref guide to standard convention tasks. This
// can be optionally turned off (see SOLR-15670).
if (propertyOrEnvOrDefault('refguide.include', 'SOLR_REF_GUIDE_INCLUDE', "true").toBoolean()) {
  check.dependsOn checkLocalJavadocLinksSite, checkSite
  assemble.dependsOn buildSite
}

@CacheableTask
abstract class PrepareSources extends DefaultTask {
    // Original Source files we'll be syncing <b>FROM</b>
    @InputDirectory
    @PathSensitive(PathSensitivity.RELATIVE)
    abstract DirectoryProperty getSrcDir()

    // Destination folder.
    @OutputDirectory
    abstract DirectoryProperty getOutDir()

    /**
     * Task specific props (lazy provider)
     */
    @Input
    abstract MapProperty<String, String> getProps()

    public PrepareSources() {
        // setup 'dependsOn classes, configurations.depVer' here
        // so that it's not necessary for every task impl to declare redundantly
        final Project p = getProject()
        dependsOn(p.getConfigurations().getByName('depVer'))
        dependsOn(p.getTasksByName('classes', false))
    }

    @TaskAction
    public void doCopy() {
        final Project p = getProject();

        // Make a local copy we'll be modifying.
        final def props = this.props.get()

        final File intoDir = this.outDir.asFile.get();

        // Emit info about properties for clarity.
        logger.lifecycle('Syncing source files to {} using props:\n{}',
                         intoDir, props.collect({ k, v -> "  ${k} -> ${v}" }).join('\n'))

        // Escape all the properties, so they can be inserted into YAML templates.
        final def escapedProps = props.collectEntries{k, v -> [k, v.replace("'","''")]}

        def sourceDir = srcDir.get()

        final WorkResult syncResult = p.sync({ copySpec ->
            copySpec.setFilteringCharset('UTF-8');
            copySpec.from(sourceDir, { raw ->
                raw.exclude('**/*.template')
            })

            copySpec.from(sourceDir, { templated ->
                templated.include('**/*.template')
                templated.rename('(.+)\\.template', '$1')
                templated.expand(escapedProps)
            })
            copySpec.into(intoDir);
        })

        setDidWork(syncResult.getDidWork());
        if (syncResult.getDidWork()) {
            // if sync did work, that means we need to rebuild the nav data files...
            p.javaexec({ execSpec ->
                execSpec.setClasspath( getProject().getConvention()
                                      .getPlugin(JavaPluginConvention.class)
                                      .getSourceSets().getByName("main").getRuntimeClasspath() )
                execSpec.setWorkingDir( intoDir )
                execSpec.setMain( 'org.apache.solr.guide.BuildNavDataFiles' )
                execSpec.args([ intoDir, p.property('mainPage') ])
            })
        }
    }
}
