/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.tools.ant.util.TeeOutputStream

plugins {
    id "com.github.node-gradle.node" version "3.1.1"
}

description = 'Solr Reference Guide'

// TODO document these properties in help
// TODO Maybe split official and local into separate tasks instead of using a property to switch.
//      This is possible now that we own the antora build process.
def isLocalGuide = propertyOrEnvOrDefault("refguide.local", "REFGUIDE_LOCAL", "true").toBoolean()
def buildLocalUI = propertyOrEnvOrDefault("refguide.buildLocalUI", "REFGUIDE_BUILD_LOCAL_UI", "false").toBoolean()

// Attach building the ref guide to standard convention tasks. This
// can be optionally turned off (see SOLR-15670).
if (propertyOrEnvOrDefault('refguide.include', 'SOLR_REF_GUIDE_INCLUDE', "true").toBoolean()) {
    check.dependsOn 'checkSiteLinks'
    assemble.dependsOn 'buildSite'
}

configurations {
    refGuide
    officialPlaybook
    localPlaybook
    playbookInUse {
        extendsFrom (isLocalGuide ? localPlaybook : officialPlaybook)
    }
}

dependencies {
    localPlaybook project(path: ":solr:documentation", configuration: 'javadocs')
    localPlaybook project(path: ":solr:documentation", configuration: 'site')
}

ext {
    antoraVersion = "3.0.1"
    rootNodeDir = "${project.rootDir}/.gradle/node"
    nodeProjectDir = file("${project.ext.rootNodeDir}/ref-guide-project")

    siteDir = "${buildDir}/site"
    playbooksDir = "${buildDir}/playbooks"
    playbookTemplate = "playbook.template.yml"
    localPlaybook = "local-playbook.yml"
    officialPlaybook = "official-playbook.yml"
    playbooksDir = "${buildDir}/playbooks"
    playbookFilePath = "${project.ext.playbooksDir}/${isLocalGuide ? project.ext.localPlaybook : project.ext.officialPlaybook}"
}

task buildAntoraYaml {
    description "Creates an antora.yml with all variables populated"

    def templateYaml = "antora.yml.template"
    def outputYaml = "antora.yml"

    inputs.file(templateYaml)
    outputs.file(outputYaml)

    doLast {
        def splitVersion = version.toString().split("\\p{Punct}")
        def props = [
            solr_version       : "${splitVersion[0]}.${splitVersion[1]}.${splitVersion[2]}",
            solr_version_major : splitVersion[0],
            solr_version_minor : splitVersion[1],
            solr_version_patch : splitVersion[2],
        ]
        // Set these dependency versions as lazy gstrings so that they're resolved after evaluation.
        // These variable names must use underscores, not dashes or periods
        props.putAll([
            ["dep_version_commons_codec", "commons-codec", "commons-codec"],
            ["dep_version_dropwizard", "io.dropwizard.metrics", "metrics-core"],
            ["dep_version_hadoop", "org.apache.hadoop", "hadoop-auth"],
            ["dep_version_log4j", "org.apache.logging.log4j", "log4j-core"],
            ["dep_version_opennlp", "org.apache.opennlp", "opennlp-tools"],
            ["dep_version_tika", "org.apache.tika", "tika-core"],
            ["dep_version_zookeeper", "org.apache.zookeeper", "zookeeper"],
            ["dep_version_lucene", "org.apache.lucene", "lucene-core"],
        ].collectEntries { propKey, depGroup, depId -> [propKey, "${-> project.getVersion(depGroup, depId)}"] })

        props.putAll([
            solrRootPath        : project(':solr').projectDir.toString() + File.separator,
            buildDate           : rootProject.ext['buildDate'],
            buildYear           : rootProject.ext['buildYear'],
            solr_javadocs_link : "https://solr.apache.org/docs/${props.solr_version.replaceAll("\\.", "_")}",
            lucene_javadocs_link :  project(':solr:documentation').luceneDocUrl,
        ])

        copy {
            from(templateYaml) {
                rename {
                    outputYaml
                }
            }
            into projectDir

            expand(props)
        }
    }
}

task buildLocalAntoraPlaybookYaml(type: Copy) {
    description "Creates ${project.ext.localPlaybook} to build and test the site locally"

    from(project.ext.playbookTemplate) {
        rename {
            project.ext.localPlaybook
        }
    }
    into project.ext.playbooksDir

    expand([
        'site_url'        : "",
        'source_url'      : projectDir.parentFile.parentFile.path,
        'source_branches' : "HEAD",
    ])
}

task buildOfficialAntoraPlaybookYaml(type: Copy) {
    description "Creates ${project.ext.officialPlaybook} to build the official Solr ref-guide"

    from(project.ext.playbookTemplate) {
        rename {
            project.ext.officialPlaybook
        }
    }
    into project.ext.playbooksDir

    expand([
        'site_url'        : "https://solr.apache.org/guide",
        'source_url'      : "https://github.com/apache/solr.git",
        'source_branches' : ["jira/solr-15556-antora"],
    ])
}

dependencies {
    localPlaybook files("${project.ext.playbooksDir}/${project.ext.localPlaybook}") {
        builtBy tasks.buildLocalAntoraPlaybookYaml
    }
    officialPlaybook files("${project.ext.playbooksDir}/${project.ext.officialPlaybook}") {
        builtBy tasks.buildOfficialAntoraPlaybookYaml
    }
}

// We use Node to install and run Antora
node {
    download = true
    version = "16.13.2" // LTS

    // The directory where Node.js is unpacked (when download is true)
    workDir = file("${project.ext.rootNodeDir}/nodejs")

    // The directory where npm is installed (when a specific version is defined)
    npmWorkDir = file("${project.ext.rootNodeDir}/npm")

    // The directory where yarn is installed (when a Yarn task is used)
    yarnWorkDir = file("${project.ext.rootNodeDir}/yarn")

    // The Node.js project directory location
    // This is where the package.json file and node_modules directory are located
    // By default it is at the root of the current project
    nodeProjectDir = project.ext.nodeProjectDir
}

task downloadAntoraCli(type: NpmTask) {
    args = ["install", "@antora/cli@${project.ext.antoraVersion}"]

    inputs.property("Antora version", project.ext.antoraVersion)
    inputs.files("${project.ext.nodeProjectDir}/package.json")
    outputs.dir("${project.ext.nodeProjectDir}/node_modules/@antora/cli")
}

task downloadAntoraSiteGenerator(type: NpmTask) {
    args = ["install", "@antora/site-generator-default@${project.ext.antoraVersion}"]

    inputs.property("Antora version", project.ext.antoraVersion)
    inputs.files("${project.ext.nodeProjectDir}/package.json")
    outputs.dir("${project.ext.nodeProjectDir}/node_modules/@antora/site-generator-default")
}

task downloadAntora {
    dependsOn tasks.downloadAntoraCli
    dependsOn tasks.downloadAntoraSiteGenerator
}

task downloadLinkValidator(type: NpmTask) {
    dependsOn tasks.downloadAntoraCli

    args = ["install", "link-checker"]

    inputs.files("${project.ext.nodeProjectDir}/package.json")
    outputs.dir("${project.ext.nodeProjectDir}/node_modules/link-checker")
}

task downloadUIDependencies(type: NpmTask) {
    args = ["install", "gitlab:antora/antora-ui-default", "--include=dev"]

    inputs.files("${project.ext.nodeProjectDir}/package.json")
    outputs.dir("${project.ext.nodeProjectDir}/node_modules/@antora/ui-default")
}

task startUIBuildDir(type: Copy) {
    dependsOn tasks.downloadUIDependencies

    // Copy the antora latest default ui into the root folder, to mimick a new checkout of the default ui
    with {
        from "${project.ext.nodeProjectDir}/node_modules/@antora/ui-default"
        duplicatesStrategy = 'EXCLUDE'
    }

    // Overwrite the parts of the UI that we have changed.
    from("${projectDir}/ui-src") {
        into "src"
    }
    duplicatesStrategy = 'INCLUDE'

    into "${buildDir}/ui"
}

task setupUIBuildDir(type: NpmTask) {
    dependsOn tasks.startUIBuildDir
    workingDir = file("${buildDir}/ui")
    args = ["install"]

    inputs.files("${buildDir}/ui/package.json")
    outputs.dir("${buildDir}/ui/node_modules/")
}

task downloadGulp(type: NpmTask) {
    dependsOn tasks.startUIBuildDir

    args = ["install", "gulp-cli", "--legacy-peer-deps"]
    execOverrides {
        // The it variable contains the `ExecSpec`
        workingDir = "${buildDir}/ui"
    }

    inputs.property("Antora version", project.ext.antoraVersion)
    inputs.files("${buildDir}/ui/package.json")
    outputs.dir("${buildDir}/ui/node_modules/")
}

task buildUIBundle(type: NpxTask) {
    dependsOn tasks.setupUIBuildDir
    dependsOn tasks.downloadGulp

    command = "gulp"

    args = [
        "bundle",
    ]
    execOverrides {
        // The it variable contains the `ExecSpec`
        workingDir = "${buildDir}/ui"
    }

    doLast {
        copy {
            from "${buildDir}/ui/build/ui-bundle.zip"
            into "${buildDir}/dist"
        }
    }

    inputs.files(fileTree("${buildDir}/ui/src") {
        exclude "node_modules"
    })
    outputs.dir(project.ext.siteDir)
}

task buildSite(type: NpxTask) {
    dependsOn tasks.downloadAntora
    dependsOn tasks.buildAntoraYaml
    dependsOn configurations.playbookInUse
    if (buildLocalUI) {
        dependsOn tasks.buildUIBundle
    }

    command = "antora"

    def extraArgs = []
    if (isLocalGuide) {
        // Use a local build of the Lucene and Solr javadocs if building a local refGuide
        extraArgs.addAll([
            // This attribute should not include ":link", the other 2 should
            // This attribute should also not be relative, because it is used in multiple path directories in the site
            "--attribute", "page-solr-javadocs=${project(':solr:documentation').docroot.toPath()}",
            "--attribute", "solr-javadocs=link:../../../${file(project.ext.siteDir).relativePath(project(':solr:documentation').docroot)}",
            "--attribute", "lucene-javadocs=link:../../../${file(project.ext.siteDir).relativePath(project(':solr:documentation').luceneDocsDir)}"
        ])
    }
    if (buildLocalUI) {
        extraArgs.addAll([
            "--ui-bundle-url", "${buildDir}/dist/ui-bundle.zip"
        ])
    }
    args = [
        "${project.ext.playbookFilePath}",
        "--fetch",
        "--to-dir=${project.ext.siteDir}",
    ] + extraArgs

    inputs.files(fileTree("${projectDir}/modules"))
    inputs.files("${projectDir}/antora.yml")
    inputs.files(project.ext.playbookFilePath)
    inputs.property("Antora version", project.ext.antoraVersion)
    if (buildLocalUI) {
        inputs.files("${buildDir}/dist/ui-bundle.zip")
    }
    outputs.dir(project.ext.siteDir)
}

task checkSiteLinks(type: NpxTask) {
    dependsOn tasks.downloadLinkValidator
    dependsOn tasks.buildSite

    command = "link-checker"
    args = [
        "${buildDir}/site",
        "--url-ignore", "file:/",
        "--mkdocs",
        "--allow-hash-href",
        "--disable-external",
        "--debug",
        // Ignore the java docs url in the header, since it is an absolute path
        "--url-ignore", "${project(':solr:documentation').docroot.toPath()}/index\\.html",
        "--json",
        "-v",
    ]

    def outputFile = "${buildDir}/validation/link-check.json"
    execOverrides {
        // The it variable contains the `ExecSpec`
        it.standardOutput = new TeeOutputStream(it.standardOutput, new FileOutputStream(outputFile))
    }

    inputs.files(fileTree(siteDir))
    outputs.file(outputFile)
}
