/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

logchange {
  rootPath = "."
  inputDir = "changelog"
  unreleasedVersionDir = "unreleased"
  outputFile = "CHANGELOG.md"
  generateChangesXml = false
}

task generateChangeYaml {
  description = 'Generates a change/log description file (YAML)'
  doLast {
    def gitUserName = 'git config user.name'.execute().text.trim()
    def configuredName = providers.gradleProperty("user.name").getOrElse(gitUserName)
    def githubId = providers.gradleProperty("user.githubid").getOrElse(null)
    def nick = githubId ? "\n    nick: ${githubId}" : ""
    def asfId = providers.gradleProperty("user.asfid").getOrElse(null)
    def asfIdUrl = asfId ? "\n    url: https://home.apache.org/phonebook.html?uid=${asfId}" : ""
    def gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
    def jiraMatcher = gitBranch =~ /SOLR-\d+/
    def jiraRef = jiraMatcher ? jiraMatcher[0] : "SOLR-XXXX"
    def jiraUrl = "https://issues.apache.org/jira/browse/${jiraRef}"
    def jiraLinks = jiraMatcher ? "links:\n  - name: ${jiraRef}\n    url: ${jiraUrl}" : ""
    def githubMatcher = gitBranch =~ /(PR|GH|GITHUB|#)?(\d+)/
    def githubRef = githubMatcher ? githubMatcher.group(2) : ""
    def githubLink = githubMatcher ? "issues:\n  - ${githubRef}" : ""
    def branchWithoutJira = gitBranch.replaceFirst(/SOLR-\d+-/, "").replaceFirst(/(PR|GH|GITHUB|#)?(\d+)/, "").replace("-", " ").capitalize()
    def targetVer = providers.gradleProperty("ver").getOrElse(project.baseVersion)
    if (!targetVer.matches("(9|1\\d)\\.\\d+\\.\\d+")) {
      throw new GradleException("Invalid target version format: ${targetVer}. Expected format is x.y.z")
    }
    def fileName = "changelog/unreleased-${targetVer}/${gitBranch}.yml"
    def file = new File(fileName)
    file.parentFile.mkdirs()
    file.text = """# logchange format: https://github.com/logchange/logchange#yaml-format
title: ${branchWithoutJira}
type: other # added/changed/deprecated/removed/fixed/security/dependency_update/other
authors:
  - name: ${configuredName}${nick}${asfIdUrl}
${jiraLinks}
${githubLink}
"""

    println "Generated file: ${fileName} -- open it"
  }
}