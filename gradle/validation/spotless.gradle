/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * SOLR-14920 modelled on LUCENE-9564: This adds automatic (and enforced) code formatting using
 * spotless and Google Java Format.
 */

def resources = scriptResources(buildscript)

configure(project(":solr").subprojects) { prj ->
  plugins.withType(JavaPlugin) {
    prj.apply plugin: 'com.diffplug.spotless'

    spotless {
      java {
        toggleOffOn() // obviously, only to be used sparingly.
        // TODO: Work out how to support multiple different header files (we have
        // classes in the codebase that have original headers). We currently use
        // Apache RAT to enforce headers so this is of lesser priority.
        //
        // licenseHeaderFile file("${resources}/asl-header.txt"), '^(\\s*package)'

        lineEndings 'UNIX'
        endWithNewline()
        googleJavaFormat('1.11.0')

        // Apply to all Java sources
        target "src/**/*.java"

        // Exclude certain files (generated ones, mostly).
        switch (project.path) {
          case ":solr:core":
            targetExclude "src/**/admin/*.java",
                "src/**/api/*.java",
                "src/**/analysis/*.java",
                "src/**/another/*.java", "src/**/api/*.java",
                "src/**/backup/*.java",
                "src/**/cache/*.java",
                "src/**/circuitbreaker/*.java",
                "src/**/cloud/*.java",
                "src/**/cluster/*.java",
                "src/**/collections/*.java",
                "src/**/collector/*.java",
                "src/**/command/*.java",
                "src/**/component/*.java",
                "src/**/configuration/*.java",
                "src/**/core/*.java",
                "src/**/csv/*.java",
                "src/**/designer/*.java",
                "src/**/distance/*.java",
                "src/**/distributed/*.java",
                "src/**/embedded/*.java",
                "src/**/endresulttransformer/*.java",
                "src/**/events/*.java",
                "src/**/export/*.java",
                "src/**/facet/*.java",
                "src/**/filestore/*.java",
                "src/**/fst/*.java",
                "src/**/function/*.java",
                "src/**/grouping/*.java",
                "src/**/handler/*.java",
                "src/**/highlight/*.java",
                "src/**/hll/*.java",
                "src/**/impl/*.java",
                "src/**/index/*.java",
                "src/**/jaspell/*.java",
                "src/**/jmx/*.java",
                "src/**/join/*.java",
                "src/**/json/*.java",
                "src/**/jul/*.java",
                "src/**/legacy/*.java",
                "src/**/loader/*.java",
                "src/**/log4j2/*.java",
                "src/**/logging/*.java",
                "src/**/macro/*.java",
                "src/**/metrics/*.java",
                "src/**/mlt/*.java",
                "src/**/neural/*.java",
                "src/**/overseer/*.java",
                "src/**/packagemanager/*.java",
                "src/**/parser/*.java",
                "src/**/pkg/*.java",
                "src/**/placement/*.java",
                "src/**/plugin/*.java",
                "src/**/plugins/*.java",
                "src/**/processor/*.java",
                "src/**/providers/*.java",
                "src/**/query/*.java",
                "src/**/reporters/*.java",
                "src/**/repository/*.java",
                "src/**/request/*.java",
                "src/**/requestfactory/*.java",
                "src/**/response/*.java",
                "src/**/responseprocessor/*.java",
                "src/**/rest/*.java",
                "src/**/schema/*.java",
                "src/**/search/*.java",
                "src/**/security/*.java",
                "src/**/servlet/*.java",
                "src/**/shardresultserializer/*.java",
                "src/**/similarities/*.java",
                "src/**/snapshots/*.java",
                "src/**/solr/*.java",
                "src/**/spelling/*.java",
                "src/**/stats/*.java",
                "src/**/suggest/*.java",
                "src/**/tagger/*.java",
                "src/**/tracing/*.java",
                "src/**/transform/*.java",
                "src/**/tst/*.java",
                "src/**/uninverting/*.java",
                "src/**/update/*.java",
                "src/**/util/*.java"
            break

          case ":solr:solrj":
            targetExclude "src/**/annotation/*.java",
                "src/**/api/*.java",
                "src/**/beans/*.java",
                "src/**/cloud/*.java",
                "src/**/common/*.java",
                "src/**/comp/*.java",
                "src/**/embedded/*.java",
                "src/**/eq/*.java",
                "src/**/eval/*.java",
                "src/**/expr/*.java",
                "src/**/graph/*.java",
                "src/**/impl/*.java",
                "src/**/io/*.java",
                "src/**/json/*.java",
                "src/**/luke/*.java",
                "src/**/metrics/*.java",
                "src/**/noggit/*.java",
                "src/**/ops/*.java",
                "src/**/params/*.java",
                "src/**/ref_guide_examples/*.java",
                "src/**/request/*.java",
                "src/**/response/*.java",
                "src/**/routing/*.java",
                "src/**/rule/*.java",
                "src/**/schema/*.java",
                "src/**/solrj/*.java",
                "src/**/sql/*.java",
                "src/**/stream/*.java",
                "src/**/util/*.java"
            break
          case ":solr:test-framework":
            targetExclude "src/**/annotation/*.java",
                "src/**/analysis/*.java",
                "src/**/cloud/*.java",
                "src/**/collections/*.java",
                "src/**/component/*.java",
                "src/**/core/*.java",
                "src/**/facet/*.java",
                "src/**/function/*.java",
                "src/**/handler/*.java",
                "src/**/processor/*.java",
                "src/**/schema/*.java",
                "src/**/search/*.java",
                "src/**/similarities/*.java",
                "src/**/solr/*.java",
                "src/**/spelling/*.java",
                "src/**/util/*.java"
            break
          case ":solr:modules:hdfs":
            // Exclude Hadoop copied files to make upgrades easier
            targetExclude "src/**/org/apache/hadoop/**"
            break
        }
      }
    }

    // Workaround for an odd problem in spotless where it fails because
    // of a missing folder.
    spotlessJava {
      doFirst {
        project.mkdir("${buildDir}/spotless/spotlessJava")
      }
    }
  }

  // Add an alias to 'spotlessApply' simply called 'tidy' and wire up
  // spotlessCheck to convention's check.
  task tidy() {
    description "Applies formatters and cleanups to sources."
    group "verification"
  }

  tasks.matching { task -> task.name == "spotlessApply" }.configureEach { v ->
    tidy.dependsOn v
  }

  tasks.matching { task -> task.name == "spotlessCheck" }.configureEach { v ->
    check.dependsOn v
  }
}
