#  Licensed to the Apache Software Foundation (ASF) under one or more
#  contributor license agreements.  See the NOTICE file distributed with
#  this work for additional information regarding copyright ownership.
#  The ASF licenses this file to You under the Apache License, Version 2.0
#  (the "License"); you may not use this file except in compliance with
#  the License.  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

@defaultMessage Spawns threads with vague names; use a custom thread factory (Lucene's NamedThreadFactory, Solr's SolrNamedThreadFactory) and name threads so that you can tell (by its name) which executor it is associated with
java.util.concurrent.Executors#newFixedThreadPool(int)
java.util.concurrent.Executors#newSingleThreadExecutor()
java.util.concurrent.Executors#newCachedThreadPool()
java.util.concurrent.Executors#newSingleThreadScheduledExecutor()
java.util.concurrent.Executors#newScheduledThreadPool(int)
java.util.concurrent.Executors#defaultThreadFactory()
java.util.concurrent.Executors#privilegedThreadFactory()

@defaultMessage Spawns threads without MDC logging context; use ExecutorUtil.newMDCAwareFixedThreadPool instead
java.util.concurrent.Executors#newFixedThreadPool(int,java.util.concurrent.ThreadFactory)

@defaultMessage Spawns threads without MDC logging context; use ExecutorUtil.newMDCAwareSingleThreadExecutor instead
java.util.concurrent.Executors#newSingleThreadExecutor(java.util.concurrent.ThreadFactory)

@defaultMessage Spawns threads without MDC logging context; use ExecutorUtil.newMDCAwareCachedThreadPool instead
java.util.concurrent.Executors#newCachedThreadPool(java.util.concurrent.ThreadFactory)

@defaultMessage Use ExecutorUtil.MDCAwareThreadPoolExecutor instead of ThreadPoolExecutor
java.util.concurrent.ThreadPoolExecutor#<init>(**)

@defaultMessage Must specify an explicit executor to run async tasks so that we have named threads
java.util.concurrent.CompletableFuture#runAsync(java.lang.Runnable)
java.util.concurrent.CompletableFuture#supplyAsync(java.util.function.Supplier)

@defaultMessage Properties files should be read/written with Reader/Writer, using UTF-8 charset. This allows reading older files with unicode escapes, too.
java.util.Properties#load(java.io.InputStream)
java.util.Properties#save(java.io.OutputStream,java.lang.String)
java.util.Properties#store(java.io.OutputStream,java.lang.String)

@defaultMessage The context classloader should never be used for resource lookups, unless there is a 3rd party library that needs it. Always pass a classloader down as method parameters.
java.lang.Thread#getContextClassLoader()
java.lang.Thread#setContextClassLoader(java.lang.ClassLoader)

java.lang.Character#codePointBefore(char[],int) @ Implicit start offset is error-prone when the char[] is a buffer and the first chars are random chars
java.lang.Character#codePointAt(char[],int) @ Implicit end offset is error-prone when the char[] is a buffer and the last chars are random chars

java.io.File#delete() @ use Files.delete for real exception, IOUtils.deleteFilesIgnoringExceptions if you dont care

java.util.Collections#shuffle(java.util.List) @ Use shuffle(List, Random) instead so that it can be reproduced

java.util.Locale#forLanguageTag(java.lang.String) @ use new Locale.Builder().setLanguageTag(...).build() which has error handling
java.util.Locale#toString() @ use Locale#toLanguageTag() for a standardized BCP47 locale name


@defaultMessage Direct calls to force the JVM to quit are forbidden in server code.
java.lang.System#exit(int)
java.lang.Runtime#exit(int)

@defaultMessage Constructors for wrapper classes of Java primitives should be avoided in favor of the public static methods available or autoboxing
java.lang.Integer#<init>(**)
java.lang.Byte#<init>(**)
java.lang.Short#<init>(**)
java.lang.Long#<init>(**)
java.lang.Boolean#<init>(**)
java.lang.Character#<init>(**)
java.lang.Float#<init>(**)
java.lang.Double#<init>(**)

@defaultMessage Java deserialization is unsafe when the data is untrusted. The java developer is powerless: no checks or casts help, exploitation can happen in places such as clinit or finalize!
java.io.ObjectInputStream
java.io.ObjectOutputStream

@defaultMessage Don't set a dictionary on a Deflater using a method that takes an offset or ByteBuffer (JDK-8252739)
java.util.zip.Deflater#setDictionary(byte[],int,int)
java.util.zip.Deflater#setDictionary(java.nio.ByteBuffer)

@defaultMessage Use RTimer/TimeOut/System.nanoTime for time comparisons, and `new Date()` output/debugging/stats of timestamps. If for some miscellaneous reason, you absolutely need to use this, use a SuppressForbidden.
java.lang.System#currentTimeMillis()

@defaultMessage Use slf4j classes instead
java.util.logging.**

@defaultMessage Use List.sort(Comparator) instead of Collections.sort(List, Comparator) please.
java.util.Collections#sort(java.util.List, java.util.Comparator)

@defaultMessage Use URI.toURL() to construct an instance of URL.
java.net.URL#<init>(**)

@defaultMessage Use Locale.Builder instead.
java.util.Locale#<init>(**)

@defaultMessage Use Path.of(...) methods instead.
java.nio.file.Paths#get(**)

@defaultMessage You probably meant to call String.startsWith
java.nio.file.Path#startsWith(java.lang.String)

@defaultMessage Use NIO Path instead of File
java.io.File

@defaultMessage Use jakarta classes not javax
# Below list derived from https://jakarta.ee/specifications/platform/11/apidocs/allpackages-index
# and then adding the xml bind packages from https://jakarta.ee/specifications/platform/10/apidocs/
javax.activation.**
javax.activation.spi.**
javax.annotation.**
javax.annotation.security.**
javax.annotation.sql.**
javax.batch.api.**
javax.batch.api.chunk.**
javax.batch.api.chunk.listener.**
javax.batch.api.listener.**
javax.batch.api.partition.**
javax.batch.operations.**
javax.batch.runtime.**
javax.batch.runtime.context.**
javax.data.**
javax.data.exceptions.**
javax.data.metamodel.**
javax.data.metamodel.impl.**
javax.data.page.**
javax.data.page.impl.**
javax.data.repository.**
javax.data.spi.**
javax.decorator.**
javax.ejb.**
javax.ejb.embeddable.**
javax.ejb.spi.**
javax.el.**
javax.enterprise.concurrent.**
javax.enterprise.concurrent.spi.**
javax.enterprise.context.**
javax.enterprise.context.control.**
javax.enterprise.context.spi.**
javax.enterprise.event.**
javax.enterprise.inject.**
javax.enterprise.inject.build.compatible.spi.**
javax.enterprise.inject.literal.**
javax.enterprise.inject.se.**
javax.enterprise.inject.spi.**
javax.enterprise.inject.spi.configurator.**
javax.enterprise.inject.spi.el.**
javax.enterprise.invoke.**
javax.enterprise.lang.model.**
javax.enterprise.lang.model.declarations.**
javax.enterprise.lang.model.types.**
javax.enterprise.util.**
javax.faces.**
javax.faces.annotation.**
javax.faces.application.**
javax.faces.component.**
javax.faces.component.behavior.**
javax.faces.component.html.**
javax.faces.component.search.**
javax.faces.component.visit.**
javax.faces.context.**
javax.faces.convert.**
javax.faces.el.**
javax.faces.event.**
javax.faces.flow.**
javax.faces.flow.builder.**
javax.faces.lifecycle.**
javax.faces.model.**
javax.faces.push.**
javax.faces.render.**
javax.faces.validator.**
javax.faces.view.**
javax.faces.view.facelets.**
javax.faces.webapp.**
javax.inject.**
javax.interceptor.**
javax.jms.**
javax.json.**
javax.json.bind.**
javax.json.bind.adapter.**
javax.json.bind.annotation.**
javax.json.bind.config.**
javax.json.bind.serializer.**
javax.json.bind.spi.**
javax.json.spi.**
javax.json.stream.**
javax.mail.**
javax.mail.event.**
javax.mail.internet.**
javax.mail.search.**
javax.mail.util.**
javax.persistence.**
javax.persistence.criteria.**
javax.persistence.metamodel.**
javax.persistence.spi.**
javax.resource.**
javax.resource.cci.**
javax.resource.spi.**
javax.resource.spi.endpoint.**
javax.resource.spi.security.**
javax.resource.spi.work.**
javax.security.auth.message.**
javax.security.auth.message.callback.**
javax.security.auth.message.config.**
javax.security.auth.message.module.**
javax.security.enterprise.**
javax.security.enterprise.authentication.mechanism.http.**
javax.security.enterprise.authentication.mechanism.http.openid.**
javax.security.enterprise.credential.**
javax.security.enterprise.identitystore.**
javax.security.enterprise.identitystore.openid.**
javax.security.jacc.**
javax.servlet.**
javax.servlet.annotation.**
javax.servlet.descriptor.**
javax.servlet.http.**
javax.servlet.jsp.**
javax.servlet.jsp.el.**
javax.servlet.jsp.jstl.core.**
javax.servlet.jsp.jstl.fmt.**
javax.servlet.jsp.jstl.sql.**
javax.servlet.jsp.jstl.tlv.**
javax.servlet.jsp.tagext.**
javax.transaction.**
javax.validation.**
javax.validation.bootstrap.**
javax.validation.constraints.**
javax.validation.constraintvalidation.**
javax.validation.executable.**
javax.validation.groups.**
javax.validation.metadata.**
javax.validation.spi.**
javax.validation.valueextraction.**
javax.websocket.**
javax.websocket.server.**
javax.ws.rs.**
javax.ws.rs.client.**
javax.ws.rs.container.**
javax.ws.rs.core.**
javax.ws.rs.ext.**
javax.ws.rs.sse.**
javax.xml.bind.**
javax.xml.bind.annotation.**
javax.xml.bind.annotation.adapters.**
javax.xml.bind.attachment.**
javax.xml.bind.helpers.**
javax.xml.bind.util.**
javax.xml.soap.**
javax.xml.ws.**
javax.xml.ws.handler.**
javax.xml.ws.handler.soap.**
javax.xml.ws.http.**
javax.xml.ws.soap.**
javax.xml.ws.spi.**
javax.xml.ws.spi.http.**
javax.xml.ws.wsaddressing.**
