/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// Helper function for specifying stable versions for dependency updates
// https://github.com/ben-manes/gradle-versions-plugin
def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

// Configure sanity check for conflicting dependencies across certain configurations
allprojects {
    apply plugin: libs.plugins.carrotsearch.dependencychecks.get().pluginId

    def consolidatedConfigurations = project.configurations.matching {
        it.name in [
                "annotationProcessor",
                "compileClasspath",
                "libExt",
                "packaging",
                "runtimeClasspath",
                "runtimeLibs",
                "server",
                "serverLib",
                "solrCore",
                "solrFullTgz",
                "solrPlatformLibs",
                "solrSlimTgz",
                "testCompileClasspath",
                "testRuntimeClasspath",
        ]
    }

    dependencyVersionChecks {
        lockFileComment = "An inventory of resolved dependency versions. Do not edit this file directly."

        configurationGroups {
            // consolidated_dependencies is a configuration group that is used
            // to check for conflicting versions of the included configurations
            consolidated_dependencies {
                include consolidatedConfigurations
            }
        }
    }

    dependencies {
        modules {
            module("org.hamcrest:hamcrest-core") {
                replacedBy("org.hamcrest:hamcrest", "hamcrest-core was renamed to hamcrest")
            }
        }
    }
}

// Configure version catalog cleanups plugin.
configure(rootProject) {
    apply plugin: libs.plugins.littlerobots.versioncatalogupdate.get().pluginId

    versionCatalogUpdate {
        sortByKey = true
    }

    tasks.matching { it.name == "tidy" }.configureEach {
        it.dependsOn(":versionCatalogFormat")
    }

    tasks.matching {
        it.path in [":versionCatalogUpdate"]
    }.configureEach {
        it.interactive = true
    }

    tasks.register("updateLibs", {
        dependsOn ":versionCatalogUpdate"
    })

    // on dependencyUpdates get only stable versions recommended if current version is stable
    // https://github.com/ben-manes/gradle-versions-plugin
    tasks.named("dependencyUpdates").configure {
        checkConstraints = true
        checkBuildEnvironmentConstraints = true
        rejectVersionIf {
            isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
        }
    }
}
