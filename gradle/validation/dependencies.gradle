/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// Helper function for specifying stable versions for dependency updates
// https://github.com/ben-manes/gradle-versions-plugin
def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

// Configure sanity check for conflicting dependencies across certain configurations
allprojects {
    apply plugin: libs.plugins.carrotsearch.dependencychecks.get().pluginId

    def consolidatedConfigurations = project.configurations.matching {
        it.name in [
                "compileClasspath",
                "runtimeClasspath",
                "annotationProcessor",
                "testCompileClasspath",
                "testRuntimeClasspath"
        ]
    }

    dependencyVersionChecks {
        lockFileComment = "An inventory of resolved dependency versions. Do not edit this file directly."

        configurationGroups {
            // consolidated_dependencies is a configuration group that is used
            // to check for conflicting versions of the included configurations
            consolidated_dependencies {
                include consolidatedConfigurations
            }
        }
    }

    dependencies {
        constraints { handler ->
            consolidatedConfigurations.configureEach { Configuration conf ->
                // Add BOMs as they resolve many dependency conflicts
                handler.add(conf.name, libs.amazon.awssdk.bom, {
                    because 'version alignment with known BOM for consistency across project'
                })
                handler.add(conf.name, libs.google.cloud.bom, {
                    because 'version alignment with known BOM for consistency across project'
                })
                handler.add(conf.name, libs.fasterxml.jackson.bom, {
                    because 'version alignment with known BOM for consistency across project'
                })
                handler.add(conf.name, libs.opentelemetry.bom, {
                    because 'version alignment with known BOM for consistency across project'
                })

                // Add known dependencies that have multiple versions as constraints
                // to align versions
                handler.add(conf.name, libs.benmanes.caffeine, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.google.guava, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.apache.commons.exec, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.xerial.snappy.java, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.grpc.context, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.commonscodec.commonscodec, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.commonsio.commonsio, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.opentelemetry.sdktrace, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.junit.junit, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.grpc.core, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.grpc.protobuf, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.jakarta.annotation.api, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.apache.commons.lang3, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.opentelemetry.sdk, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.grpc.stub, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.eclipse.jetty.server, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.fasterxml.woodstox.core, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.netty.codechttp, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.slf4j.jultoslf4j, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.apache.commons.compress, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.carrotsearch.hppc, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.apache.log4j.api, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.grpc.api, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.slf4j.jcloverslf4j, {
                    because 'version alignment for consistency across project'
                })

                // Add transitive dependencies as constraints to align versions
                handler.add(conf.name, libs.ow2.asm, {
                    because 'transitive version alignment for consistency across project'
                })
                handler.add(conf.name, libs.google.protobuf.java, {
                    because 'transitive version alignment for consistency across project'
                })
                handler.add(conf.name, libs.apache.kerby.crypto, {
                    because 'transitive version alignment for consistency across project'
                })
                handler.add(conf.name, libs.google.gson, {
                    because 'transitive version alignment for consistency across project'
                })
                handler.add(conf.name, libs.opentelemetry.sdkextension.autoconfigure.spi, {
                    because 'transitive version alignment for consistency across project'
                })
                handler.add(conf.name, libs.google.autovalue.annotations, {
                    because 'transitive version alignment for consistency across project'
                })
                handler.add(conf.name, libs.apache.commons.text, {
                    because 'transitive version alignment for consistency across project'
                })
                handler.add(conf.name, libs.netty.buffer, {
                    because 'transitive version alignment for consistency across project'
                })
                handler.add(conf.name, libs.netty.transport, {
                    because 'transitive version alignment for consistency across project'
                })
                handler.add(conf.name, libs.jodatime.jodatime, {
                    because 'transitive version alignment for consistency across project'
                })
                handler.add(conf.name, libs.netty.transport.native.unix.common, {
                    because 'transitive version alignment for consistency across project'
                })
                handler.add(conf.name, libs.google.api.grpc.proto, {
                    because 'transitive version alignment for consistency across project'
                })
                handler.add(conf.name, libs.netty.handler, {
                    because 'transitive version alignment for consistency across project'
                })
                handler.add(conf.name, libs.opentelemetry.sdkcommon, {
                    because 'transitive version alignment for consistency across project'
                })
                handler.add(conf.name, libs.jaxb.txw2, {
                    because 'transitive version alignment for consistency across project'
                })
                handler.add(conf.name, libs.google.errorprone.annotations, {
                    because 'transitive version alignment for consistency across project'
                })
                handler.add(conf.name, libs.grpc.protobuf.lite, {
                    because 'transitive version alignment for consistency across project'
                })
                handler.add(conf.name, libs.grpc.util, {
                    because 'transitive version alignment for consistency across project'
                })
                handler.add(conf.name, libs.opentelemetry.sdkmetrics, {
                    because 'transitive version alignment for consistency across project'
                })
                handler.add(conf.name, libs.opentelemetry.sdklogs, {
                    because 'transitive version alignment for consistency across project'
                })
                handler.add(conf.name, libs.jaxb.runtime, {
                    because 'transitive version alignment for consistency across project'
                })
                handler.add(conf.name, libs.opentelemetry.apiincubator, {
                    because 'transitive version alignment for consistency across project'
                })

                // Problematic version alignments
                handler.add(conf.name, libs.checkerframework.qual, {
                    // Not fully backwards compatible
                    because 'Apache Tika in modules:extraction is outdated'
                    because 'Google guava not using latest version'
                    because 'Google Cloud BOM dependencies use latest version'
                    because 'transitive version alignment for consistency across project'
                })
            }
        }
    }
}

// Configure version catalog cleanups plugin.
configure(rootProject) {
    apply plugin: libs.plugins.littlerobots.versioncatalogupdate.get().pluginId

    versionCatalogUpdate {
        sortByKey = true
    }

    tasks.matching { it.name == "tidy" }.configureEach {
        it.dependsOn(":versionCatalogFormat")
    }

    tasks.matching {
        it.path in [ ":versionCatalogUpdate" ]
    }.configureEach {
        it.interactive = true
    }

    tasks.register("updateLibs", {
        dependsOn ":versionCatalogUpdate"
    })

    // on dependencyUpdates get only stable versions recommended if current version is stable
    // https://github.com/ben-manes/gradle-versions-plugin
    tasks.named("dependencyUpdates").configure {
        checkConstraints = true
        checkBuildEnvironmentConstraints = true
        rejectVersionIf {
            isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
        }
    }
}