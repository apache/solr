/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// Helper function for specifying stable versions for dependency updates
// https://github.com/ben-manes/gradle-versions-plugin
def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

// Configure sanity check for conflicting dependencies across certain configurations
allprojects {
    apply plugin: libs.plugins.carrotsearch.dependencychecks.get().pluginId

    def consolidatedConfigurations = project.configurations.matching {
        it.name in [
                "annotationProcessor",
                "compileClasspath",
                "libExt",
                "packaging",
                "runtimeClasspath",
                "runtimeLibs",
                "server",
                "serverLib",
                "solrCore",
                "solrFullTgz",
                "solrPlatformLibs",
                "solrSlimTgz",
                "testCompileClasspath",
                "testRuntimeClasspath",
        ]
    }

    dependencyVersionChecks {
        lockFileComment = "An inventory of resolved dependency versions. Do not edit this file directly."

        configurationGroups {
            // consolidated_dependencies is a configuration group that is used
            // to check for conflicting versions of the included configurations
            consolidated_dependencies {
                include consolidatedConfigurations
            }
        }
    }

    dependencies {
        modules {
            module("org.hamcrest:hamcrest-core") {
                replacedBy("org.hamcrest:hamcrest", "hamcrest-core was renamed to hamcrest")
            }
        }

        constraints { handler ->
            consolidatedConfigurations.configureEach { Configuration conf ->
                // Add BOMs as they resolve many dependency conflicts
                handler.add(conf.name, libs.amazon.awssdk.bom, {
                    because 'version alignment with known BOM for consistency across project'
                })
                handler.add(conf.name, libs.google.cloud.bom, {
                    because 'version alignment with known BOM for consistency across project'
                })
                handler.add(conf.name, libs.fasterxml.jackson.bom, {
                    because 'version alignment with known BOM for consistency across project'
                })
                handler.add(conf.name, libs.opentelemetry.bom, {
                    because 'version alignment with known BOM for consistency across project'
                })
                handler.add(conf.name, libs.grpc.bom, {
                    because 'version alignment with known BOM for consistency across project'
                })
                handler.add(conf.name, libs.netty.bom, {
                    because 'version alignment with known BOM for consistency across project'
                })

                // Add known dependencies that have multiple versions as constraints
                // to align versions
                handler.add(conf.name, libs.google.guava, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.google.errorprone.annotations, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.apache.commons.exec, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.xerial.snappy.java, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.grpc.context, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.commonscli.commonscli, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.commonscodec.commonscodec, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.commonsio.commonsio, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.junit.junit, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.grpc.core, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.grpc.protobuf, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.jakarta.annotation.api, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.apache.commons.lang3, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.grpc.stub, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.eclipse.jetty.server, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.fasterxml.woodstox.core, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.slf4j.api, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.slf4j.jultoslf4j, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.apache.commons.compress, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.benmanes.caffeine, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.carrotsearch.hppc, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.apache.log4j.api, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.grpc.api, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.slf4j.jcloverslf4j, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.netty.codechttp, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.bc.jose4j, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.lmax.disruptor, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.apache.httpcomponents.httpclient, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.apache.httpcomponents.httpcore, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.apache.httpcomponents.httpmime, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.apache.zookeeper.zookeeper, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.apache.zookeeper.jute, {
                    because 'version alignment for consistency across project'
                })
                handler.add(conf.name, libs.hamcrest.hamcrest, {
                    because 'version alignment for consistency across project'
                })

                // Add transitive dependencies as constraints to align versions
                handler.add(conf.name, libs.checkerframework.qual, {
                    because "transitive version alignment for consistency across project" +
                            "\n- ${getFullName(libs.google.guava)} uses 3.42.0" +
                            "\n- ${getFullName(libs.benmanes.caffeine)} uses 3.37.0" +
                            "\n- ${getFullName(libs.google.cloud.storage)} uses 3.44.0"
                })
                handler.add(conf.name, libs.ow2.asm, {
                    because "transitive version alignment for consistency across project" +
                            "\n- ${getFullName(libs.apache.lucene.expressions)} uses 7.2" +
                            "\n- ${getFullName(libs.apache.tika.parsers)} uses 9.3"
                })
                handler.add(conf.name, libs.google.protobuf.java, {
                    because "transitive version alignment for consistency across project" +
                            "\n- ${getFullName(libs.google.errorprone.core)} uses 3.19.6" +
                            "\n- ${getFullName(libs.apache.tika.parsers)} uses 3.21.5" +
                            "\n- ${getFullName(libs.apache.calcite.avatica.core)} uses 3.21.9" +
                            "\n- ${getFullName(libs.google.cloud.storage)} uses 3.25.3" +
                            "\n- ${getFullName(libs.google.cloud.core)} uses 3.25.3"
                })
                handler.add(conf.name, libs.google.gson, {
                    because "transitive version alignment for consistency across project" +
                            "\n- ${getFullName(libs.grpc.core)} uses 2.10.1" +
                            "\n- ${getFullName(libs.apache.tika.parsers)} uses 2.9.1" +
                            "\n- ${getFullName(libs.google.cloud.storage)} uses 2.11.0 and 2.10.1" +
                            "\n- ${getFullName(libs.google.protobuf.java)} uses 2.8.9" +
                            "\n- ${getFullName(libs.google.cloud.core)} uses 2.8.9 and 2.10.1" +
                            "\n- ${getFullName(libs.google.auth.oauth2http)} uses 2.10.1"
                })
                handler.add(conf.name, libs.google.autovalue.annotations, {
                    because "transitive version alignment for consistency across project" +
                            "\n- ${getFullName(libs.google.cloud.storage)} uses 1.10.4" +
                            "\n- ${getFullName(libs.google.cloud.corehttp)} uses 1.10.4" +
                            "\n- ${getFullName(libs.google.cloud.core)} uses 1.10.4" +
                            "\n- ${getFullName(libs.google.api.gax)} uses 1.10.4" +
                            "\n- ${getFullName(libs.google.auth.oauth2http)} uses 1.10.4" +
                            "\n- ${getFullName(libs.google.cloud.bom)} uses 1.10.4" +
                            "\n- ${getFullName(libs.google.errorprone.core)} uses 1.9"
                })
                handler.add(conf.name, libs.apache.commons.text, {
                    because "transitive version alignment for consistency across project" +
                            "\n- ${getFullName(libs.apache.calcite.core)} uses 1.11.0" +
                            "\n- ${getFullName(libs.apache.commons.configuration2)} uses 1.12.0"
                })
                handler.add(conf.name, libs.grpc.util, {
                    because "transitive version alignment for consistency across project" +
                            "\n- ${getFullName(libs.google.cloud.storage)} uses 1.62.2" +
                            "\n- ${getFullName(libs.grpc.netty)} uses 1.65.1"
                })
                handler.add(conf.name, libs.jodatime.jodatime, {
                    because "transitive version alignment for consistency across project" +
                            "\n- ${getFullName(libs.amazon.awssdk.sdkcore)} uses 2.8.1" +
                            "\n- ${getFullName(libs.apache.tika.parsers)} uses 2.2"
                })
                handler.add(conf.name, libs.google.api.grpc.proto, {
                    because "transitive version alignment for consistency across project" +
                            "\n- ${getFullName(libs.grpc.protobuf.asProvider())} uses 2.29.0" +
                            "\n- ${getFullName(libs.google.api.gax)} uses 2.41.0" +
                            "\n- ${getFullName(libs.google.api.grpc.proto)} uses 2.41.0" +
                            "\n- ${getFullName(libs.google.cloud.core)} uses 2.41.0" +
                            "\n- ${getFullName(libs.google.cloud.storage)} uses 2.41.0"
                })
                handler.add(conf.name, libs.netty.handler, {
                    because "transitive version alignment for consistency across project" +
                            "\n- ${getFullName(libs.apache.zookeeper.zookeeper)} uses 4.1.105.Final" +
                            "\n- ${getFullName(libs.netty.codechttp)} uses 4.1.112.Final"
                })
                handler.add(conf.name, libs.grpc.protobuf.lite, {
                    because "transitive version alignment for consistency across project" +
                            "\n- ${getFullName(libs.google.cloud.storage)} uses 1.62.2" +
                            "\n- ${getFullName(libs.grpc.protobuf.asProvider())} uses 1.65.1"
                })
                handler.add(conf.name, libs.jaxb.runtime, {
                    because "transitive version alignment for consistency across project" +
                            "\n- ${getFullName(libs.apache.tika.parsers)} uses 2.3.5" +
                            "\n- ${getFullName(libs.adobe.testing.s3mock.testsupportcommon)} uses 2.3.8"
                })
                handler.add(conf.name, libs.perfmark.api, {
                    because "transitive version alignment for consistency across project" +
                            "\n- ${getFullName(libs.grpc.core)} uses 0.26.0" +
                            "\n- ${getFullName(libs.grpc.netty)} uses 0.26.0" +
                            "\n- ${getFullName(libs.google.cloud.storage)} uses 0.27.0"
                })
                handler.add(conf.name, libs.netty.tcnative.boringssl, {
                    because "transitive version alignment for consistency across project" +
                            "\n- ${getFullName(libs.netty.bom)} uses 2.0.66.Final" +
                            "\n- ${getFullName(libs.apache.zookeeper.zookeeper)} uses 2.0.61.Final"
                })
                handler.add(conf.name, libs.netty.transport.classes.epoll, {
                    because "transitive version alignment for consistency across project" +
                            "\n- ${getFullName(libs.netty.bom)} uses 4.1.114.Final" +
                            "\n- ${getFullName(libs.apache.zookeeper.zookeeper)} uses 4.1.105.Final"
                })
                handler.add(conf.name, libs.netty.transport.native.epoll, {
                    because "transitive version alignment for consistency across project" +
                            "\n- ${getFullName(libs.netty.bom)} uses 4.1.114.Final" +
                            "\n- ${getFullName(libs.apache.zookeeper.zookeeper)} uses 4.1.105.Final"
                })
                handler.add(conf.name, libs.google.j2objc.annotations, {
                    because "transitive version alignment for consistency across project" +
                            "\n- ${getFullName(libs.google.guava)} uses 3.0.0" +
                            "\n- ${getFullName(libs.google.protobuf.javautils)} uses 2.8"
                })
                handler.add(conf.name, libs.apiguardian.api, {
                    because "transitive version alignment for consistency across project" +
                            "\n- ${getFullName(libs.apache.calcite.core)} uses 1.1.2" +
                            "\n- ${getFullName(libs.junit.junit)} (api) uses 1.1.0"
                })
                handler.add(conf.name, libs.hk2.locator, {
                    because "transitive version alignment for consistency across project" +
                            "\n- ${getFullName(libs.jersey.inject.hk2)} uses 3.0.6" +
                            "\n- ${getFullName(libs.hk2.api)} uses 3.1.1"
                })
            }
        }
    }
}

static def getFullName(Provider<MinimalExternalModuleDependency> dependency) {
    def resolvedDep = dependency.get()
    return "${resolvedDep.module.group}:${resolvedDep.module.name}"
}

// Configure version catalog cleanups plugin.
configure(rootProject) {
    apply plugin: libs.plugins.littlerobots.versioncatalogupdate.get().pluginId

    versionCatalogUpdate {
        sortByKey = true
    }

    tasks.matching { it.name == "tidy" }.configureEach {
        it.dependsOn(":versionCatalogFormat")
    }

    tasks.matching {
        it.path in [":versionCatalogUpdate"]
    }.configureEach {
        it.interactive = true
    }

    tasks.register("updateLibs", {
        dependsOn ":versionCatalogUpdate"
    })

    // on dependencyUpdates get only stable versions recommended if current version is stable
    // https://github.com/ben-manes/gradle-versions-plugin
    tasks.named("dependencyUpdates").configure {
        checkConstraints = true
        checkBuildEnvironmentConstraints = true
        rejectVersionIf {
            isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
        }
    }
}
