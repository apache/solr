/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Pull and unpack javadocs from published Maven artifacts.

configure(project(":solr:documentation")) {
  ext {
    javadocsDir = file("${project.buildDir}/lucene-javadocs")
  }

  configurations {
    javadocs {
      // Not sure why we need this, otherwise regular JARs get sucked in, not just
      // javadoc-classifier JARs
      transitive = false
    }
  }

  dependencies {
    // Note we can't use the abbreviated form (above) because we omit the version number
    // for the palantir plugin and at the same time we wish to use the classifier.
    javadocs group: 'org.apache.lucene', name: 'lucene-core', classifier: 'javadoc'
    javadocs group: 'org.apache.lucene', name: 'lucene-analysis-common', classifier: 'javadoc'
    javadocs group: 'org.apache.lucene', name: 'lucene-analysis-kuromoji', classifier: 'javadoc'
    // .. add more?
  }


  // Collect and unpack javadoc artifacts from 'javadocs' configuration
  task collectJavadocs() {
    dependsOn configurations.javadocs

    inputs.files configurations.javadocs
    outputs.dir javadocsDir

    doFirst {
      def resolved = configurations.javadocs.resolvedConfiguration
      resolved.resolvedArtifacts.each { artifact ->
        def id = artifact.moduleVersion.id
        def subpath = id.group.replace('.', '/') + "/" + id.name

        project.sync {
          from zipTree(artifact.file)
          into file("${javadocsDir}/${subpath}/")
        }
      }
    }
  }

  artifacts {
    javadocs javadocsDir, {
      builtBy collectJavadocs
    }
  }
}
