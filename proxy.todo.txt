
* metrics tracking (separate from default metrics; different name)
* client instance (separate from default instance)
* tracing integration
* auth integration

separate:
* Http2SolrClient shouldn't use the "idleTimeout" as a default to requestTimeout not existing for the request timeout.  Just let it default to whatever Jetty does.
  Q: what typically happens today; is requestTimeout almost always used, rendering this a minor matter?

* Jetty Request.Listener registration -- want this done on the client.  Simplifies Http2SolrClient
  and then HttpClient could be shared to a Jetty ProxyServlet (doesn't know about Http2SolrClient), and
  get our listeners that provide metrics, tracing, and auth.  Makes what Solr has less special.
  BUT: can we have per-request lifecycle?
